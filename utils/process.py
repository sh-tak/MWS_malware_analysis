import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA, NMF, FastICA
import umap
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.manifold import TSNE    


def fillna_with_mean(df):
    for column in df.columns:
        column_mean = df[column].mean()
        df[column].fillna(column_mean, inplace=True)
    return df


def transform_log(df):
    raise NotImplementedError


def multiply_feature(df):
    raise NotImplementedError


def add_kmean_cluster(df):
    n_clusters = 16
    # np_array = df.values
    # pred = pd.DataFrame(
    #     KMeans(n_clusters=n_clusters).fit_predict(np_array), columns=["kmeans"]
    # )
    # df_encoded = pd.get_dummies(pred["kmeans"], prefix="kmeans")
    # df = pd.concat([df, df_encoded], axis=1)
    # return df
    raise NotImplementedError


def drop_all_na_cols(df):
    df = df.dropna(axis=1, how="all")
    return df


def fillna_with_zero(df):
    df = df.fillna(0)
    return df


def reduce_dim_with_umap(df_labeled, df_unlabeled, df_test, dim=3, n_neighbors=8):
    df_labeled 
    train_x_np = df_train.drop("labels", axis=1).values
    train_y_np = df_train["labels"].values
    test_x_np = df_test.drop("labels", axis=1).values

    mapper = umap.UMAP(
        random_state=0, n_neighbors=n_neighbors, n_components=dim, n_jobs=-1
    )

    mapper.fit(train_x_np)
    x_train = mapper.transform(train_x_np)
    x_test = mapper.transform(test_x_np)

    df_train = pd.DataFrame(x_train, columns=[f"umap_{i}" for i in range(dim)])
    df_train['labels'] = train_y_np
    df_test = pd.DataFrame(x_test, columns=[f"umap_{i}" for i in range(dim)])
    df_test['labels'] = -1

    return df_train, df_test


def reduce_dim_with_pca(df_train, df_test, dim=3):
    train_x_np = df_train.drop("labels", axis=1).values
    train_y_np = df_train["labels"].values
    test_x_np = df_test.drop("labels", axis=1).values
    
    mapper = PCA(n_components=dim)
    mapper.fit(train_x_np)
    mapper.fit(train_x_np)
    x_train = mapper.transform(train_x_np)
    x_test = mapper.transform(test_x_np)

    df_train = pd.DataFrame(x_train, columns=[f"pca_{i}" for i in range(dim)])
    df_train['labels'] = train_y_np
    df_test = pd.DataFrame(x_test, columns=[f"pca_{i}" for i in range(dim)])
    df_test['labels'] = -1

    return df_train, df_test

    
def reduce_dim_with_lda(df_train, df_test, dim=3):
    train_x_np = df_train.drop("labels", axis=1).values
    train_y_np = df_train["labels"].values
    test_x_np = df_test.drop("labels", axis=1).values

    mapper = LinearDiscriminantAnalysis(n_components=3)
    mapper.fit(train_x_np)
    mapper.fit(train_x_np)
    x_train = mapper.transform(train_x_np)
    x_test = mapper.transform(test_x_np)

    df_train = pd.DataFrame(x_train, columns=[f"pca_{i}" for i in range(dim)])
    df_train['labels'] = train_y_np
    df_test = pd.DataFrame(x_test, columns=[f"pca_{i}" for i in range(dim)])
    df_test['labels'] = -1

    return df_train, df_test


def reduce_dim_with_tsne(df, dim=3):
    data_np = df.drop("labels").values
    tsne = TSNE(n_components=dim)
    reduced_np = tsne.fit_transform(data_np)
    df = pd.DataFrame(reduced_np, columns=[f"tsne_{i}" for i in range(dim)])
    return df

    
def recude_dim_with_ica(df, dim=3):
    data_np = df.drop("labels").values
    ica = FastICA(n_components=dim)
    reduced_np = ica.fit_transform(data_np)
    df = pd.DataFrame(reduced_np, columns=[f"ica_{i}" for i in range(dim)])
    return df


def drop_zero_var_cols(df):
    df = df.loc[:, df.var() != 0]
    return df
